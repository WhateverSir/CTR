#loc = loc(unknown)
module attributes {module.FLOPs = 468593920 : i64, module.asymmetric = true, module.chip = "bm1684x", module.mode = "F32", module.name = "DCN", module.platform = "ONNX", module.state = "TPU_LOWERED", module.weight_file = "dcn_tpu_lowered_bm1684x_f32_weight.npz"} {
  func.func @main(%arg0: tensor<256x5xf32> loc(unknown)) -> tensor<256x1xf32> {
    %0 = "top.None"() : () -> none loc(#loc)
    %1 = "top.Input"(%arg0) : (tensor<256x5xf32>) -> tensor<256x5xf32> loc(#loc1)
    %2 = "tpu.Slice"(%1, %0, %0, %0, %0) {ends = [256, 1], offset = [0, 0], steps = [1, 1]} : (tensor<256x5xf32>, none, none, none, none) -> tensor<256x1xf32> loc(#loc2)
    %3 = "tpu.Reshape"(%2) : (tensor<256x1xf32>) -> tensor<256xf32> loc(#loc3)
    %4 = "tpu.Cast"(%3) {with_scale = true} : (tensor<256xf32>) -> tensor<256xi32> loc(#loc4)
    %5 = "top.Weight"() : () -> tensor<6032x64xf32> loc(#loc5)
    %6 = "tpu.Gather"(%5, %4, %0) {axis = 0 : i64} : (tensor<6032x64xf32>, tensor<256xi32>, none) -> tensor<256x64xf32> loc(#loc6)
    %7 = "tpu.Slice"(%1, %0, %0, %0, %0) {ends = [256, 2], offset = [0, 1], steps = [1, 1]} : (tensor<256x5xf32>, none, none, none, none) -> tensor<256x1xf32> loc(#loc7)
    %8 = "tpu.Reshape"(%7) : (tensor<256x1xf32>) -> tensor<256xf32> loc(#loc8)
    %9 = "tpu.Cast"(%8) {with_scale = true} : (tensor<256xf32>) -> tensor<256xi32> loc(#loc9)
    %10 = "top.Weight"() : () -> tensor<3027x64xf32> loc(#loc10)
    %11 = "tpu.Gather"(%10, %9, %0) {axis = 0 : i64} : (tensor<3027x64xf32>, tensor<256xi32>, none) -> tensor<256x64xf32> loc(#loc11)
    %12 = "tpu.Slice"(%1, %0, %0, %0, %0) {ends = [256, 3], offset = [0, 2], steps = [1, 1]} : (tensor<256x5xf32>, none, none, none, none) -> tensor<256x1xf32> loc(#loc12)
    %13 = "tpu.Reshape"(%12) : (tensor<256x1xf32>) -> tensor<256xf32> loc(#loc13)
    %14 = "tpu.Cast"(%13) {with_scale = true} : (tensor<256xf32>) -> tensor<256xi32> loc(#loc14)
    %15 = "top.Weight"() : () -> tensor<3x64xf32> loc(#loc15)
    %16 = "tpu.Gather"(%15, %14, %0) {axis = 0 : i64} : (tensor<3x64xf32>, tensor<256xi32>, none) -> tensor<256x64xf32> loc(#loc16)
    %17 = "tpu.Slice"(%1, %0, %0, %0, %0) {ends = [256, 4], offset = [0, 3], steps = [1, 1]} : (tensor<256x5xf32>, none, none, none, none) -> tensor<256x1xf32> loc(#loc17)
    %18 = "tpu.Reshape"(%17) : (tensor<256x1xf32>) -> tensor<256xf32> loc(#loc18)
    %19 = "tpu.Cast"(%18) {with_scale = true} : (tensor<256xf32>) -> tensor<256xi32> loc(#loc19)
    %20 = "top.Weight"() : () -> tensor<8x64xf32> loc(#loc20)
    %21 = "tpu.Gather"(%20, %19, %0) {axis = 0 : i64} : (tensor<8x64xf32>, tensor<256xi32>, none) -> tensor<256x64xf32> loc(#loc21)
    %22 = "tpu.Slice"(%1, %0, %0, %0, %0) {ends = [256, 5], offset = [0, 4], steps = [1, 1]} : (tensor<256x5xf32>, none, none, none, none) -> tensor<256x1xf32> loc(#loc22)
    %23 = "tpu.Reshape"(%22) : (tensor<256x1xf32>) -> tensor<256xf32> loc(#loc23)
    %24 = "tpu.Cast"(%23) {with_scale = true} : (tensor<256xf32>) -> tensor<256xi32> loc(#loc24)
    %25 = "top.Weight"() : () -> tensor<22x64xf32> loc(#loc25)
    %26 = "tpu.Gather"(%25, %24, %0) {axis = 0 : i64} : (tensor<22x64xf32>, tensor<256xi32>, none) -> tensor<256x64xf32> loc(#loc26)
    %27 = "tpu.Concat"(%6, %11, %16, %21, %26) {axis = 1 : si32, do_relu = false, only_merge = false, relu_limit = -1.000000e+00 : f64} : (tensor<256x64xf32>, tensor<256x64xf32>, tensor<256x64xf32>, tensor<256x64xf32>, tensor<256x64xf32>) -> tensor<256x320xf32> loc(#loc27)
    %28 = "top.Weight"() : () -> tensor<320x1xf32> loc(#loc28)
    %29 = "tpu.MatMul"(%27, %28, %0) {do_relu = false, hdim_is_batch = false, input_zp = 0 : i64, keep_dims = true, left_reuse = 1 : i64, left_transpose = false, multipliers = [1], output_transpose = false, quant_mode = #tpu<rq_mode MultiplierShift>, relu_limit = -1.000000e+00 : f64, right_transpose = false, right_zp = 0 : i64, rshifts = [0]} : (tensor<256x320xf32>, tensor<320x1xf32>, none) -> tensor<256x1xf32> loc(#loc29)
    %30 = "tpu.Mul"(%27, %29) {do_relu = false, multiplier = 1 : si32, quant_mode = #tpu<rq_mode MultiplierShift>, relu_limit = -1.000000e+00 : f64, rshift = 0 : si32} : (tensor<256x320xf32>, tensor<256x1xf32>) -> tensor<256x320xf32> loc(#loc30)
    %31 = "top.Weight"() : () -> tensor<1x320xf32> loc(#loc31)
    %32 = "tpu.Add"(%30, %31) {do_relu = false, relu_limit = -1.000000e+00 : f64} : (tensor<256x320xf32>, tensor<1x320xf32>) -> tensor<256x320xf32> loc(#loc32)
    %33 = "tpu.Add"(%32, %27) {do_relu = false, relu_limit = -1.000000e+00 : f64} : (tensor<256x320xf32>, tensor<256x320xf32>) -> tensor<256x320xf32> loc(#loc33)
    %34 = "top.Weight"() : () -> tensor<320x1xf32> loc(#loc34)
    %35 = "tpu.MatMul"(%33, %34, %0) {do_relu = false, hdim_is_batch = false, input_zp = 0 : i64, keep_dims = true, left_reuse = 1 : i64, left_transpose = false, multipliers = [1], output_transpose = false, quant_mode = #tpu<rq_mode MultiplierShift>, relu_limit = -1.000000e+00 : f64, right_transpose = false, right_zp = 0 : i64, rshifts = [0]} : (tensor<256x320xf32>, tensor<320x1xf32>, none) -> tensor<256x1xf32> loc(#loc35)
    %36 = "tpu.Mul"(%27, %35) {do_relu = false, multiplier = 1 : si32, quant_mode = #tpu<rq_mode MultiplierShift>, relu_limit = -1.000000e+00 : f64, rshift = 0 : si32} : (tensor<256x320xf32>, tensor<256x1xf32>) -> tensor<256x320xf32> loc(#loc36)
    %37 = "top.Weight"() : () -> tensor<1x320xf32> loc(#loc37)
    %38 = "tpu.Add"(%36, %37) {do_relu = false, relu_limit = -1.000000e+00 : f64} : (tensor<256x320xf32>, tensor<1x320xf32>) -> tensor<256x320xf32> loc(#loc38)
    %39 = "tpu.Add"(%38, %33) {do_relu = false, relu_limit = -1.000000e+00 : f64} : (tensor<256x320xf32>, tensor<256x320xf32>) -> tensor<256x320xf32> loc(#loc39)
    %40 = "top.Weight"() : () -> tensor<320x1xf32> loc(#loc40)
    %41 = "tpu.MatMul"(%39, %40, %0) {do_relu = false, hdim_is_batch = false, input_zp = 0 : i64, keep_dims = true, left_reuse = 1 : i64, left_transpose = false, multipliers = [1], output_transpose = false, quant_mode = #tpu<rq_mode MultiplierShift>, relu_limit = -1.000000e+00 : f64, right_transpose = false, right_zp = 0 : i64, rshifts = [0]} : (tensor<256x320xf32>, tensor<320x1xf32>, none) -> tensor<256x1xf32> loc(#loc41)
    %42 = "tpu.Mul"(%27, %41) {do_relu = false, multiplier = 1 : si32, quant_mode = #tpu<rq_mode MultiplierShift>, relu_limit = -1.000000e+00 : f64, rshift = 0 : si32} : (tensor<256x320xf32>, tensor<256x1xf32>) -> tensor<256x320xf32> loc(#loc42)
    %43 = "top.Weight"() : () -> tensor<1x320xf32> loc(#loc43)
    %44 = "tpu.Add"(%42, %43) {do_relu = false, relu_limit = -1.000000e+00 : f64} : (tensor<256x320xf32>, tensor<1x320xf32>) -> tensor<256x320xf32> loc(#loc44)
    %45 = "tpu.Add"(%44, %39) {do_relu = false, relu_limit = -1.000000e+00 : f64} : (tensor<256x320xf32>, tensor<256x320xf32>) -> tensor<256x320xf32> loc(#loc45)
    %46 = "top.Weight"() : () -> tensor<320x500xf32> loc(#loc46)
    %47 = "top.Weight"() : () -> tensor<500xf32> loc(#loc47)
    %48 = "tpu.MatMul"(%27, %46, %47) {do_relu = true, hdim_is_batch = false, input_zp = 0 : i64, keep_dims = true, left_reuse = 1 : i64, left_transpose = false, multipliers = [1], output_transpose = false, quant_mode = #tpu<rq_mode MultiplierShift>, relu_limit = -1.000000e+00 : f64, right_transpose = false, right_zp = 0 : i64, rshifts = [0]} : (tensor<256x320xf32>, tensor<320x500xf32>, tensor<500xf32>) -> tensor<256x500xf32> loc(#loc48)
    %49 = "top.Weight"() : () -> tensor<500x500xf32> loc(#loc49)
    %50 = "top.Weight"() : () -> tensor<500xf32> loc(#loc50)
    %51 = "tpu.MatMul"(%48, %49, %50) {do_relu = true, hdim_is_batch = false, input_zp = 0 : i64, keep_dims = true, left_reuse = 1 : i64, left_transpose = false, multipliers = [1], output_transpose = false, quant_mode = #tpu<rq_mode MultiplierShift>, relu_limit = -1.000000e+00 : f64, right_transpose = false, right_zp = 0 : i64, rshifts = [0]} : (tensor<256x500xf32>, tensor<500x500xf32>, tensor<500xf32>) -> tensor<256x500xf32> loc(#loc51)
    %52 = "top.Weight"() : () -> tensor<500x500xf32> loc(#loc52)
    %53 = "top.Weight"() : () -> tensor<500xf32> loc(#loc53)
    %54 = "tpu.MatMul"(%51, %52, %53) {do_relu = true, hdim_is_batch = false, input_zp = 0 : i64, keep_dims = true, left_reuse = 1 : i64, left_transpose = false, multipliers = [1], output_transpose = false, quant_mode = #tpu<rq_mode MultiplierShift>, relu_limit = -1.000000e+00 : f64, right_transpose = false, right_zp = 0 : i64, rshifts = [0]} : (tensor<256x500xf32>, tensor<500x500xf32>, tensor<500xf32>) -> tensor<256x500xf32> loc(#loc54)
    %55 = "top.Weight"() : () -> tensor<500x500xf32> loc(#loc55)
    %56 = "top.Weight"() : () -> tensor<500xf32> loc(#loc56)
    %57 = "tpu.MatMul"(%54, %55, %56) {do_relu = true, hdim_is_batch = false, input_zp = 0 : i64, keep_dims = true, left_reuse = 1 : i64, left_transpose = false, multipliers = [1], output_transpose = false, quant_mode = #tpu<rq_mode MultiplierShift>, relu_limit = -1.000000e+00 : f64, right_transpose = false, right_zp = 0 : i64, rshifts = [0]} : (tensor<256x500xf32>, tensor<500x500xf32>, tensor<500xf32>) -> tensor<256x500xf32> loc(#loc57)
    %58 = "tpu.Concat"(%45, %57) {axis = 1 : si32, do_relu = false, only_merge = false, relu_limit = -1.000000e+00 : f64} : (tensor<256x320xf32>, tensor<256x500xf32>) -> tensor<256x820xf32> loc(#loc58)
    %59 = "top.Weight"() : () -> tensor<820x1xf32> loc(#loc59)
    %60 = "top.Weight"() : () -> tensor<1xf32> loc(#loc60)
    %61 = "tpu.MatMul"(%58, %59, %60) {do_relu = false, hdim_is_batch = false, input_zp = 0 : i64, keep_dims = true, left_reuse = 1 : i64, left_transpose = false, multipliers = [1], output_transpose = false, quant_mode = #tpu<rq_mode MultiplierShift>, relu_limit = -1.000000e+00 : f64, right_transpose = false, right_zp = 0 : i64, rshifts = [0]} : (tensor<256x820xf32>, tensor<820x1xf32>, tensor<1xf32>) -> tensor<256x1xf32> loc(#loc61)
    %62 = "tpu.Active"(%61) {bias = 0.000000e+00 : f64, log = false, mode = #tpu<active_mode SIGMOID>, scale = 1.000000e+00 : f64} : (tensor<256x1xf32>) -> tensor<256x1xf32> loc(#loc62)
    return %62 : tensor<256x1xf32> loc(#loc)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("input")
#loc2 = loc("/embedding_layer/Gather_output_0_Slice")
#loc3 = loc("/embedding_layer/Gather_output_0_Gather")
#loc4 = loc("/embedding_layer/Gather_output_0_Gather_si32")
#loc5 = loc("embedding_layer.embedding_layer.uid.weight")
#loc6 = loc("/embedding_layer/uid/Gather_output_0_Gather")
#loc7 = loc("/embedding_layer/Gather_1_output_0_Slice")
#loc8 = loc("/embedding_layer/Gather_1_output_0_Gather")
#loc9 = loc("/embedding_layer/Gather_1_output_0_Gather_si32")
#loc10 = loc("embedding_layer.embedding_layer.vid.weight")
#loc11 = loc("/embedding_layer/vid/Gather_output_0_Gather")
#loc12 = loc("/embedding_layer/Gather_2_output_0_Slice")
#loc13 = loc("/embedding_layer/Gather_2_output_0_Gather")
#loc14 = loc("/embedding_layer/Gather_2_output_0_Gather_si32")
#loc15 = loc("embedding_layer.embedding_layer.sex.weight")
#loc16 = loc("/embedding_layer/sex/Gather_output_0_Gather")
#loc17 = loc("/embedding_layer/Gather_3_output_0_Slice")
#loc18 = loc("/embedding_layer/Gather_3_output_0_Gather")
#loc19 = loc("/embedding_layer/Gather_3_output_0_Gather_si32")
#loc20 = loc("embedding_layer.embedding_layer.age.weight")
#loc21 = loc("/embedding_layer/age/Gather_output_0_Gather")
#loc22 = loc("/embedding_layer/Gather_4_output_0_Slice")
#loc23 = loc("/embedding_layer/Gather_4_output_0_Gather")
#loc24 = loc("/embedding_layer/Gather_4_output_0_Gather_si32")
#loc25 = loc("embedding_layer.embedding_layer.job.weight")
#loc26 = loc("/embedding_layer/job/Gather_output_0_Gather")
#loc27 = loc("/Concat_output_0_Concat")
#loc28 = loc("onnx::MatMul_71")
#loc29 = loc("/dcn/w.0/MatMul_output_0_MatMul")
#loc30 = loc("/dcn/Mul_output_0_Mul")
#loc31 = loc("dcn.b.0")
#loc32 = loc("/dcn/Add_output_0_Add")
#loc33 = loc("/dcn/Add_1_output_0_Add")
#loc34 = loc("onnx::MatMul_72")
#loc35 = loc("/dcn/w.1/MatMul_output_0_MatMul")
#loc36 = loc("/dcn/Mul_1_output_0_Mul")
#loc37 = loc("dcn.b.1")
#loc38 = loc("/dcn/Add_2_output_0_Add")
#loc39 = loc("/dcn/Add_3_output_0_Add")
#loc40 = loc("onnx::MatMul_73")
#loc41 = loc("/dcn/w.2/MatMul_output_0_MatMul")
#loc42 = loc("/dcn/Mul_2_output_0_Mul")
#loc43 = loc("dcn.b.2")
#loc44 = loc("/dcn/Add_4_output_0_Add")
#loc45 = loc("/dcn/Add_5_output_0_Add")
#loc46 = loc("dnn.dnn.0.weight_fix")
#loc47 = loc("dnn.dnn.0.bias")
#loc48 = loc("/dnn/dnn/dnn.1/Relu_output_0_Relu")
#loc49 = loc("dnn.dnn.2.weight_fix")
#loc50 = loc("dnn.dnn.2.bias")
#loc51 = loc("/dnn/dnn/dnn.3/Relu_output_0_Relu")
#loc52 = loc("dnn.dnn.4.weight_fix")
#loc53 = loc("dnn.dnn.4.bias")
#loc54 = loc("/dnn/dnn/dnn.5/Relu_output_0_Relu")
#loc55 = loc("dnn.dnn.6.weight_fix")
#loc56 = loc("dnn.dnn.6.bias")
#loc57 = loc("/dnn/dnn/dnn.7/Relu_output_0_Relu")
#loc58 = loc("/Concat_1_output_0_Concat")
#loc59 = loc("Dense.weight_fix")
#loc60 = loc("Dense.bias")
#loc61 = loc("/Dense/Gemm_output_0_Gemm")
#loc62 = loc("output_Sigmoid")

